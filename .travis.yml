<<<<<<< HEAD
sudo: false
language: php
notifications:
  email:
    on_success: never
    on_failure: change
  slack:
    secure: m7u+XoneBm6N+VSt8lkpH9Zi8aZMA7vgg7VZgCc7PiP/N0nbUAeoNHIWv6Hi4mc6xfZYuQ31EHSKt4uM3f710rzR8JuYSd97vVAMronP2vMMw2ziP9jaTehTSLVozChUVsf0D6UsN2CXj/7NEirEXnNkiU7H95GJKMP2b+ptcIVfWc6xnNNvIlChGxOchqdQ6wyi4Genoj7HU+L6GZBSlExUI0lBm9jOtsDuf+sAywZRC2m8S/3Y1njqvu/6vfS6SpBkglhcwHKdKYFDDdSBrY1xkogL3uiDJCPUh2GcsiB/WB4Rkzz1vl1YScD8kcW+HOvwtpzeQhawzBSERO9b4BX2oUqEZZRQOyfZgb7++leofYpTTtHkEgfQMVXSxd0kOpTnVK0ukuHGSsU2SesJPyINJtH7GQgz00c1TgiihNzL8968WLqkz2FRhyIuNZN8C5n2GQLbJkOmVBI3n9qS9vocf14uMkP3SESlJDF3MDhPV2JOKjB0WRE1SZwGS08pTGeG+nC8NnInM2bjJ84aF8FN72wISFlGv2J6uYSCL6mHsX7Oar4Pg21Jck9f3/Zw/fAaKQQcFaAwtajXPI/Cp+sS0Scyq4AIHxbWCtUhQ4mq8cl141pqod2BoPzgpBXvTvFQcHzcm/jnNfeCvfk8QZQBiBBVTM0ARwq/bmPZFMc=

branches:
  only:
    - master
    - development

php:
  - 5.6
  - 7.1

env:
  matrix:
    - WP_VERSION=4.4
    - WP_VERSION=latest
    - WP_VERSION=trunk

before_install:
  - composer global require "squizlabs/php_codesniffer=*"
  - composer global require "wp-coding-standards/wpcs"
  - ls ${HOME}/.composer/vendor/squizlabs/php_codesniffer/bin
  - ${HOME}/.composer/vendor/squizlabs/php_codesniffer/bin/phpcs --config-set installed_paths ~/.composer/vendor/wp-coding-standards/wpcs
  # After CodeSniffer install you should refresh your path.
  - phpenv rehash;

script:
  # Run against WordPress Coding Standards.
  # If you use a custom ruleset, change `--standard=WordPress` to point to your ruleset file,
  # for example: `--standard=wpcs.xml`.
  # You can use any of the normal PHPCS command line arguments in the command:
  # https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage
  - ${HOME}/.composer/vendor/squizlabs/php_codesniffer/bin/phpcs --standard=WordPress-Core --extensions=php --colors -s -p -v ./
=======
# Travis CI (MIT License) configuration file for the WordPress Plugin Boilerplate
# @link https://travis-ci.org/

# For use with the WordPress Plugin Boilerplate
# @link https://github.com/seb86/WordPress-Plugin-Boilerplate

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
php:
    # aliased to a recent 5.5.x version
    - "5.5"
    # aliased to a recent 5.4.x version
    - "5.4"
    # aliased to a recent 5.3.x version
    - "5.3"
    # Current $required_php_version for WordPress: 5.2.4
    - "5.2"

# Declare which versions of WordPress to test against.
# Also declare whether or not to test in Multisite.
env:
    # Trunk
    # @link https://github.com/WordPress/WordPress
    - WP_VERSION=master WP_MULTISITE=0
    - WP_VERSION=master WP_MULTISITE=1
    # WordPress 3.9
    # @link https://github.com/WordPress/WordPress/tree/3.9-branch
    - WP_VERSION=3.9 WP_MULTISITE=0
    - WP_VERSION=3.9 WP_MULTISITE=1
    # WordPress 3.8
    # @link https://github.com/WordPress/WordPress/tree/3.8-branch
    - WP_VERSION=3.8 WP_MULTISITE=0
    - WP_VERSION=3.8 WP_MULTISITE=1

# Declare 5.6 beta in test matrix.
# @link http://docs.travis-ci.com/user/build-configuration/
matrix:
    include:
        - php: 5.6
          env: WP_VERSION=master
    allow_failures:
        - php: 5.6
    fast_finish: true

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
# before_install:

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
    # Set up WordPress installation.
    - export WP_DEVELOP_DIR=/tmp/wordpress/
    - mkdir -p $WP_DEVELOP_DIR
    # Use the Git mirror of WordPress.
    - git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
    # Set up plugin information.
    - plugin_slug=$(basename $(pwd))
    - plugin_dir=$WP_DEVELOP_DIR/src/wp-content/plugins/$plugin_slug
    - cd ..
    - mv $plugin_slug $plugin_dir
    # Set up WordPress configuration.
    - cd $WP_DEVELOP_DIR
    - echo $WP_DEVELOP_DIR
    - cp wp-tests-config-sample.php wp-tests-config.php
    - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
    - sed -i "s/yourusernamehere/root/" wp-tests-config.php
    - sed -i "s/yourpasswordhere//" wp-tests-config.php
    # Create WordPress database.
    - mysql -e 'CREATE DATABASE wordpress_test;' -uroot
    # Install CodeSniffer for WordPress Coding Standards checks.
    - git clone https://github.com/squizlabs/PHP_CodeSniffer.git php-codesniffer
    # Install WordPress Coding Standards.
    - git clone https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git wordpress-coding-standards
    # Hop into CodeSniffer directory.
    - cd php-codesniffer
    # Set install path for WordPress Coding Standards
    # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
    - scripts/phpcs --config-set installed_paths ../wordpress-coding-standards
    # Hop into plugins directory.
    - cd $plugin_dir
    # After CodeSniffer install you should refresh your path.
    - phpenv rehash
    #- bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION

script:
    phpunit
    - bin/atoum --test-all

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
#script:
    # Search for PHP syntax errors.
    ##- find . \( -name '*.php' \) -exec php -lf {} \;
    # WordPress Coding Standards
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings (shortcut for --warning-severity=0)
    # --standard: Use WordPress as the standard.
    # --extensions: Only sniff PHP files.
    ##- $WP_DEVELOP_DIR/php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php

after_script:
    - php vendor/bin/coveralls --config tests/.coveralls.yml -v --exclude-no-stmt

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    email: true
>>>>>>> master
